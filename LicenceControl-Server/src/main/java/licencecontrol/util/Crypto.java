package licencecontrol.util;

import java.io.IOException;
import java.math.BigInteger;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.RSAPrivateKeySpec;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;

public class Crypto {
	
	private static final BigInteger PRIV_KEY_MODULUS = new BigInteger("20524028555919395017281257486316"
			+ "5112306182823003495869035554102405544529649856226348910568110286414825514259917244531422"
			+ "9495894494970164797960821981217051652600491237188680136975445791212256034490542715418280"
			+ "0043080790761778512348715020172125988281989014619642240107011511504059948259296872791817"
			+ "3043674674268950920356711470959928836700174487307481515619543547685526315079685107612869"
			+ "5263562776755096157030718384841995980949091681177951785686540811729711768676717004012578"
			+ "4979573198997562866693273281608872906157918044067836880017335988323102076667084246331279"
			+ "411905713497072245788275144458755958130110434053591673559");
	private static final BigInteger PRIV_KEY_EXPONENT = new BigInteger("5758515603189737637941434039678"
			+ "1666617118417830970017544681154691748978610579615943722897392495027172613275117235949826"
			+ "8946862199574460080639998696776159204541218439498687006709255797622884232757253146331253"
			+ "0741293766582656869937106852479134728054827257897462219983943843531694376132443518880875"
			+ "4839664462981283709374674302723276001184397143884739050824486386210485064920684213992191"
			+ "8517911754679700702704346889688816394909935375645087516771829059789521285137176955932455"
			+ "1629995673428329056138349612181714895542039967989887281947223898265736459413394883809626"
			+ "429786207161101450115017041228660830838711591136014877953");
	private static final String CRYPTO_ALGO = "RSA";
	
	public static PrivateKey getPrivateKey() throws NoSuchAlgorithmException, InvalidKeySpecException {
		RSAPrivateKeySpec spec = new RSAPrivateKeySpec(PRIV_KEY_MODULUS, PRIV_KEY_EXPONENT);
		KeyFactory factory = KeyFactory.getInstance(CRYPTO_ALGO);
		return factory.generatePrivate(spec);
	}

	public static byte[] decryptData(byte[] data, PrivateKey key)
			throws IOException, InvalidKeyException, NoSuchAlgorithmException,
			NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException {
		byte[] descryptedData = null;
		Cipher cipher = Cipher.getInstance(CRYPTO_ALGO);
		cipher.init(Cipher.DECRYPT_MODE, key);
		descryptedData = cipher.doFinal(data);
		return descryptedData;
	}
	
}
